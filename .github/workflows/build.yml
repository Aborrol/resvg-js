name: Build and Publish

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x64-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux-arm64-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: win32-x64-msvc
          - os: windows-latest
            target: i686-pc-windows-msvc
            platform: win32-ia32-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: darwin-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: darwin-arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          npm ci
          npm install -g @napi-rs/cli

      - name: Install aarch64 cross-compiler
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Add Rust target (if needed)
        run: rustup target add ${{ matrix.target }}

      - name: Update platform package versions
        run: node scripts/update-versions.js

      - name: Build for platform
        run: |
          napi build --target ${{ matrix.target }} --release

      - name: Copy native module to platform directory
        shell: bash
        run: |
          # Debug: List all .node files in the workspace
          echo "🔍 Searching for .node files..."
          find . -name "*.node" -type f
          echo ""
          
          # Debug: Check if the specific file exists
          echo "🔍 Looking for resvgjs.${{ matrix.platform }}.node..."
          if [ -f "resvgjs.${{ matrix.platform }}.node" ]; then
            echo "✅ Found resvgjs.${{ matrix.platform }}.node in root directory"
          else
            echo "❌ resvgjs.${{ matrix.platform }}.node not found in root directory"
          fi
          
          # Find the built .node file and copy it to the platform directory
          echo "🔍 Running find command..."
          find . -name "resvgjs.${{ matrix.platform }}.node" -exec cp {} npm/${{ matrix.platform }}/ \;
          
          # Debug: Check if file was copied
          echo "🔍 Checking if file was copied to npm/${{ matrix.platform }}/..."
          ls -la npm/${{ matrix.platform }}/

      - name: Check and publish platform package
        shell: bash
        run: |
          cd npm/${{ matrix.platform }}
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")
          echo "Checking if $PACKAGE_NAME@$VERSION already exists..."
          
          # Check if version exists in npm registry
          if npm view "$PACKAGE_NAME@$VERSION" version >/dev/null 2>&1; then
            echo "✅ $PACKAGE_NAME@$VERSION already exists, skipping publish"
          else
            echo "📦 $PACKAGE_NAME@$VERSION does not exist, publishing..."
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-main:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          npm ci
          npm install -g @napi-rs/cli

      - name: Build JS binding
        run: |
          napi build --platform --release --js js-binding.js --dts js-binding.d.ts

      - name: Minify JS binding
        run: |
          npx esbuild js-binding.js --minify --allow-overwrite --outfile=js-binding.js

      - name: Check and publish main package
        shell: bash
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")
          echo "Checking if $PACKAGE_NAME@$VERSION already exists..."
          
          # Check if version exists in npm registry
          if npm view "$PACKAGE_NAME@$VERSION" version >/dev/null 2>&1; then
            echo "✅ $PACKAGE_NAME@$VERSION already exists, skipping publish"
          else
            echo "📦 $PACKAGE_NAME@$VERSION does not exist, publishing..."
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} 